lista = [['To communicate with computers and make them do whatever is needed, we use programming languages; these have a different set of rules than natural languages (called a @), to avoid imprecisions, because computers are silly, so they need precise instructions.', 'syntax'], ['Internet is a network of computers, they communicate with each other through a protocol called @, and they transfer files from one to another. Most important transferred files are in html format, but they can transfer any kind of file.', 'http'], ['Html gives to web pages the structure; the elements in it are tree-like, meaning that there is a branching pattern. CSS is a different language, used to give @ to the web sites.', 'style'], ['The basic HTML element format is: < opening-tag > content < closing-tag > , although there are some tags without closing tag, called void tags (br, hr, img and other self contained elements). Some tags have also attributes, like class or id. In html everything is considered a box, and some boxes are inside bigger boxes (the branching pattern). There are tags that make this boxes, called block tags; but there are also tags that give structure to elements in the html without splitting it from the rectangle in which it is, and are called @ elements.', 'inline'], ['Span is used to select an inline element, while div forms blocks. @ is an attribute used for multiple alike elements, while id gives name to one element and must not be repeated in the same html (css allows it, but javascript will have troubles and is not considered valid). Besides div and p, there are other semantical tags, which are useful to make webpages more accesible . It is a good idea to name classes in a way that whoever is reading the code can have a good idea of what he can find in that block.', 'class'], ['The HTML tree-like structure, where one has branches going down the document (or boxes containing other boxes, if better understood) is modeled by the Document Object Model (@). The DOM is an API implemented in every browser to handle the structure of web pages; it models every element of an HTML document as an object, which can be parent or child of other objects, and allowing the manipulation of these objects by other languages, like CSS o JS, as required. ', 'dom'], ['Css goes down through every element (Cascading) and applies the most specific rule to it. In the computer sciences, there is an abstract concept called @; is a mechanism by which properties asigned to an element are applied to itself and its descending elements. Generally speaking, text properties are inherited, box related properties are not inherited. This idea is important, since it avoids repetition.', 'inheritance'], ['In css we use the @, which are called so because they permit to choose the element for style application. They are composed by the name of the tag (p, div, ...); the attributes can also be used as selectors using dot and the name of the attribute (for example, the class name): .description {} .. After the selector, between brackets, come the styling rules that will be applied to the selected elements. The property chosen to be changed is written between the brackets in the way: attribute colon value semicolon.', 'selectors'], ['There are three methods to include style: To include CSS in the html head, using the style tag. To link a css file as a separate stylesheet, using the @ tag in the html head. To write the style inline as a tag attribute, which is not a preferred method.', 'link'], ['Every element is considered part of a box, and every box is modeled as having, from outside to inside: @, border, padding, content. Each of these can be modified to give the needed style.', 'margin'], ['Computational science is about how to solve problems. Programming is the main thing in computational science. Most of the human made machines are designed to accomplish only one single work. Computers by themselves cant accomplish any labor; but computers with programs, can do a lot of different things. A computer program is a simple sequence of instructions, sequence that the computer must follow closely; these different instructions are made using a @ language, and python is just one of them.', 'programming'], ['Programming languages are different from natural languages in that are less verbose, less redundant and specially unambiguous, as well as space saving. Most languages today have a set of rules (a syntax) described as @ form; they are composed by expressions, being an expression an abstract concept that has some value. The expressions can be combined by the construction <non-terminal> -> replacement, where the arrow signals an assignment operation.', 'Backus - Naur'], ['Every expression can be successively replaced until it gets to a @ value, where it can be no longer replaced. Some other rules come from this construct, like expression -> expression operator expression, expression -> number or expression -> (expression); notice that all of these keep the same pattern of the original construct <non-terminal> -> replacement. A recursive definition requires at least a set of two definitions; otherwise, it would be circular, that being a meaningless definition.', 'terminal'], ['A variable is a name that refers to a value. In python, a variable is assigned using the form <variable name> = expression, where = corresponds to the @ symbol. As a convention, the first letter of the variable must be lowercase. Care must be taken to avoid confusing mathematical equal to with the assignment operator = used in python.', 'assignment'], ['In python, text is represented as a @, which is a sequence of characters (letters, digits and symbols); strings can contain any number of characters. A string is built by surrounding text by single or double quotes.', 'string'], ['The operator +, when used with two strings, concatenates them; also, using the operator * for multiplying a string times an integer, produces a bigger string composed of multiple times the initial string. Strings can be indexed and sliced; in python, the first component the string is indexed as @. The method for indexation is string[expression], where expression is anything that evaluates to a number. The way to slice is string[expression1:expression2], and the slice includes the characters from string[expression1] to string[expression2 - 1].', 'zero'], ['The method string.find(str) produces the position where first occurs the substring str in string, or returns -1 if it is not found. The @ function sends an output to the console. To manufacture a multiline string, that includes returns and spaces, triple single quotes or triple double quotes are used.', 'print'], ['@ are procedures that are used frequently used, so instead of declaring them every time it is needed, it is defined in a generical way, and easily called when desired. To define a function the structure is: def nameFunction (parameters): procedure return xxx', 'functions'], ['And to use the function, is called by the name and passing it the necessary arguments. In this case x = nameFunction(parameters), it returns xxx, which will be kept in a variable x. Every function has inputs and outputs. To get an output from a function, it must @ something.', 'return'], ['If a variable is passed to a function, it does not get modified as a result of the function; the variables defined inside the function, that is, that are @ to the function, are encapsulated and wont exist outside the function.', 'if'], ['In order to make decisions, it is used the @ construct, which evaluates a test expression and, according to its value (True or False) performs the instructions of one block or another. The way the if is built is: if <test expresion>: <block> else: <else block>', ''], ['The test expression is usually constructed with less than (<), more than (>), is equal to (==), is different to (!=). The end of the block is determined by @. or and and can also be used to evaluate the test expression. To perform a repetitive action, the while loop is used; is constructed like this: while <test expression>: <block>', 'local'], ['The block is executed while the text expression is @, and when it changes, the block execution stops; in order to avoid that a block keeps going forever, in every iteration of the block, something must change. Sometimes, an index variable is used to keep track of the execution, and when it reaches a certain value, it makes the test expression False, so the loop execution stops. The while loop can perform some instruction multiple times, but if can perform it only once. One way to make a while stop is putting a break inside it.', 'indentation'], ['While programming is unavoidable to have mistakes; its very important to develop a programming technique that allows to find easily the mistakes, and a method to find and correct programming mistakes systematically. The methodology to find and correct mistakes is called debugging, and it has some important steps:', 'true'], ['Read the @ message; in python, the message gives a type of error and number of line where execution stopped; although the error can be found there, it can also be upstream.', 'function'], ['One option is to copy a similar @, and approach to the needed function, changing step by step, one small part every time, evaluating what happens when every small thing is changed.', 'Bugs'], ['@ that dont stop code execution are harder to find and make programs work erratically; if one is not getting the expected results, it is useful to print intermediate results.', ''], ['Sometimes, code works partially; if one gets to a point where major changes must be done, one can screw up what is really working, so it is really important to not loose what is working well; it is preferable to comment the original code, save a copy or use version controllers, like @.', 'git'], ['Recapitulating the @ strategy: error messages must be examined, work from example code doing small step modifications, get sure that code from third parties work correctly, print intermediate results, and keep and compare old versions.', 'debugging'], ['Comments are very useful when debugging; single line comments are made with #, and docstrings are made with triple single quotes; @ are multiple line comments that the python interpreter retains as function documentation. Comments must be kept updated, while code is modified. The idea is that code must be concise, always consistent with the style chosen to document the code, and must give important information; that is, the obvious must not be commented.', 'docstrings'], ['String is data type that is structured; it is a sequence of characters that can be split into smaller pieces (characters). But strings arent complex enough, not everything can be done with a string, so python implements bigger structured data types. @ are sequences of anything; in python, they are formed with square brackets, and list elements are separated by commas: <list> = [<expresion>, <expresion>, ...]. List elements are indexed in the same way that strings. Lists can nest other lists inside of them.', 'lists'], ['Lists are @, that meaning it may be modified after being created. Strings are not mutable; elements can be appended to strings, but they form a new string, wont modify the original. This seemingly subtle difference gets more notorious if one introduces a new variable and assigns it to same object: if a list changes with one name, also changes with the other; this is called aliasing: there are two ways to call the same object. Functions cant change the values of strings or numbers outside themselves, but can mutate list elements.', 'mutable']]
[Finished in 0.8s]